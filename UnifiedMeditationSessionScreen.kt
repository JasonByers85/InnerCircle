package com.google.mediapipe.examples.llminference

import androidx.compose.animation.core.*
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.viewmodel.compose.viewModel
import kotlinx.coroutines.delay

@Composable
internal fun UnifiedMeditationSessionRoute(
    meditationType: String,
    onBack: () -> Unit,
    onComplete: () -> Unit
) {
    val context = LocalContext.current
    val viewModel: UnifiedMeditationSessionViewModel = viewModel(
        factory = UnifiedMeditationSessionViewModel.getFactory(context, meditationType)
    )
    
    val sessionState by viewModel.sessionState.collectAsStateWithLifecycle()
    val currentStep by viewModel.currentStep.collectAsStateWithLifecycle()
    val progress by viewModel.progress.collectAsStateWithLifecycle()
    val isPlaying by viewModel.isPlaying.collectAsStateWithLifecycle()
    val audioSettings by viewModel.audioSettings.collectAsStateWithLifecycle()
    val generationStatus by viewModel.generationStatus.collectAsStateWithLifecycle()
    val showSaveDialog by viewModel.showSaveDialog.collectAsStateWithLifecycle()
    val isFullyGenerated by viewModel.isFullyGenerated.collectAsStateWithLifecycle()
    val currentSentence by viewModel.currentSentence.collectAsStateWithLifecycle()
    val settings = remember { MeditationSettings.getInstance(context) }

    // Handle completion
    LaunchedEffect(sessionState) {
        if (sessionState == UnifiedMeditationSessionState.COMPLETED) {
            delay(2000) // Show completion message for 2 seconds
            onComplete()
        }
    }

    UnifiedMeditationSessionScreen(
        sessionState = sessionState,
        currentStep = currentStep,
        progress = progress,
        isPlaying = isPlaying,
        audioSettings = audioSettings,
        generationStatus = generationStatus,
        showSaveDialog = showSaveDialog,
        isFullyGenerated = isFullyGenerated,
        currentSentence = currentSentence,
        onPlayPause = viewModel::togglePlayPause,
        onStop = { viewModel.stopSession(); onBack() },
        onSoundToggle = viewModel::toggleSound,
        onBinauralToggle = viewModel::toggleBinaural,
        onTtsToggle = viewModel::toggleTts,
        onBackgroundSoundChange = viewModel::setBackgroundSound,
        onBinauralToneChange = viewModel::setBinauralTone,
        onBackgroundVolumeChange = viewModel::setBackgroundVolume,
        onBinauralVolumeChange = viewModel::setBinauralVolume,
        onTtsVolumeChange = viewModel::setTtsVolume,
        onTtsSpeedChange = viewModel::setTtsSpeed,
        onTtsPitchChange = viewModel::setTtsPitch,
        onTtsVoiceChange = viewModel::setTtsVoice,
        onRetryGeneration = viewModel::retryGeneration,
        onSave = { viewModel.showSaveDialog() },
        onSaveDialogDismiss = { viewModel.hideSaveDialog() },
        onSaveExact = { name, description -> viewModel.saveAsExactSession(name, description) },
        onSaveTemplate = { name, description -> viewModel.saveAsTemplate(name, description) },
        onBack = onBack,
        settings = settings,
        context = context
    )
}

@Composable
fun UnifiedMeditationSessionScreen(
    sessionState: UnifiedMeditationSessionState,
    currentStep: UnifiedMeditationStep?,
    progress: UnifiedMeditationProgress,
    isPlaying: Boolean,
    audioSettings: AudioSettings,
    generationStatus: MeditationGenerationStatus,
    showSaveDialog: Boolean,
    isFullyGenerated: Boolean,
    currentSentence: String,
    onPlayPause: () -> Unit,
    onStop: () -> Unit,
    onSoundToggle: () -> Unit,
    onBinauralToggle: () -> Unit,
    onTtsToggle: () -> Unit,
    onBackgroundSoundChange: (BackgroundSound) -> Unit,
    onBinauralToneChange: (BinauralTone) -> Unit,
    onBackgroundVolumeChange: (Float) -> Unit,
    onBinauralVolumeChange: (Float) -> Unit,
    onTtsVolumeChange: (Float) -> Unit,
    onTtsSpeedChange: (Float) -> Unit,
    onTtsPitchChange: (Float) -> Unit,
    onTtsVoiceChange: (String) -> Unit,
    onRetryGeneration: () -> Unit,
    onSave: () -> Unit,
    onSaveDialogDismiss: () -> Unit,
    onSaveExact: (String, String) -> Unit,
    onSaveTemplate: (String, String) -> Unit,
    onBack: () -> Unit,
    settings: MeditationSettings,
    context: android.content.Context
) {
    var showSettingsDialog by remember { mutableStateOf(false) }

    // Use gradient background from custom screen
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFF1A1A2E),
                        Color(0xFF16213E),
                        Color(0xFF0F3460)
                    )
                )
            )
            .padding(16.dp)
    ) {
        // Top bar with complete audio controls (from normal screen)
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = onBack) {
                Icon(
                    Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }

            // Audio controls from normal screen
            Row {
                // TTS toggle
                IconButton(onClick = onTtsToggle) {
                    Icon(
                        if (audioSettings.ttsEnabled) Icons.Default.RecordVoiceOver else Icons.Default.VoiceOverOff,
                        contentDescription = if (audioSettings.ttsEnabled) "Disable Voice" else "Enable Voice",
                        tint = if (audioSettings.ttsEnabled) Color(0xFF64B5F6) else Color.Gray,
                        modifier = Modifier.size(28.dp)
                    )
                }

                // Background sound toggle
                IconButton(onClick = onSoundToggle) {
                    Icon(
                        if (audioSettings.soundEnabled) Icons.Default.MusicNote else Icons.Default.MusicOff,
                        contentDescription = if (audioSettings.soundEnabled) "Disable Background Sound" else "Enable Background Sound",
                        tint = if (audioSettings.soundEnabled) Color(0xFF64B5F6) else Color.Gray,
                        modifier = Modifier.size(28.dp)
                    )
                }

                // Binaural tone toggle
                IconButton(onClick = onBinauralToggle) {
                    Icon(
                        Icons.Default.GraphicEq,
                        contentDescription = if (audioSettings.binauralEnabled) "Disable Binaural" else "Enable Binaural",
                        tint = if (audioSettings.binauralEnabled) Color(0xFF64B5F6) else Color.Gray,
                        modifier = Modifier.size(28.dp)
                    )
                }

                // Save button (only for custom meditations)
                if (currentStep?.isCustomGenerated == true) {
                    IconButton(onClick = onSave) {
                        Icon(
                            Icons.Default.BookmarkAdd,
                            contentDescription = "Save Meditation",
                            tint = Color(0xFF64B5F6),
                            modifier = Modifier.size(28.dp)
                        )
                    }
                }

                // Settings dialog
                IconButton(onClick = { showSettingsDialog = true }) {
                    Icon(
                        Icons.Default.Settings,
                        contentDescription = "Settings",
                        tint = Color.Gray,
                        modifier = Modifier.size(28.dp)
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Session progress and time
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Step ${progress.currentStepIndex + 1} of ${progress.totalSteps}",
                color = Color(0xFF64B5F6),
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium
            )
            
            Text(
                text = formatTime(progress.totalTimeRemaining),
                color = Color(0xFF64B5F6),
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Progress bar
        LinearProgressIndicator(
            progress = { (progress.currentStepIndex + 1).toFloat() / progress.totalSteps.toFloat() },
            modifier = Modifier.fillMaxWidth(),
            color = Color(0xFF64B5F6),
            trackColor = Color.White.copy(alpha = 0.2f)
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Main content area
        when (sessionState) {
            UnifiedMeditationSessionState.PREPARING -> {
                PreparationContent(
                    generationStatus = generationStatus,
                    onRetry = onRetryGeneration,
                    onCancel = onBack
                )
            }
            
            UnifiedMeditationSessionState.READY -> {
                ReadyContent(
                    currentStep = currentStep,
                    onStart = onPlayPause
                )
            }
            
            UnifiedMeditationSessionState.ACTIVE,
            UnifiedMeditationSessionState.PAUSED -> {
                ActiveSessionContent(
                    currentStep = currentStep,
                    progress = progress,
                    isPlaying = isPlaying,
                    generationStatus = generationStatus,
                    onPlayPause = onPlayPause,
                    onStop = onStop,
                    audioSettings = audioSettings,
                    currentSentence = currentSentence
                )
            }
            
            UnifiedMeditationSessionState.COMPLETED -> {
                CompletedContent()
            }
        }
    }

    // Settings dialog
    if (showSettingsDialog) {
        UnifiedMeditationSettingsDialog(
            settings = settings,
            context = context,
            soundEnabled = audioSettings.soundEnabled,
            onSoundToggle = onSoundToggle,
            backgroundSound = audioSettings.backgroundSound,
            onBackgroundSoundChange = onBackgroundSoundChange,
            binauralEnabled = audioSettings.binauralEnabled,
            onBinauralToggle = onBinauralToggle,
            binauralTone = audioSettings.binauralTone,
            onBinauralToneChange = onBinauralToneChange,
            ttsEnabled = audioSettings.ttsEnabled,
            onTtsToggle = onTtsToggle,
            onBackgroundVolumeChange = onBackgroundVolumeChange,
            onBinauralVolumeChange = onBinauralVolumeChange,
            onTtsVolumeChange = onTtsVolumeChange,
            onTtsSpeedChange = onTtsSpeedChange,
            onTtsPitchChange = onTtsPitchChange,
            onDismiss = { showSettingsDialog = false }
        )
    }

    // Save dialog
    if (showSaveDialog) {
        SaveMeditationDialog(
            onDismiss = onSaveDialogDismiss,
            onSaveExact = onSaveExact,
            onSaveTemplate = onSaveTemplate,
            isFullyGenerated = isFullyGenerated
        )
    }
}

@Composable
private fun PreparationContent(
    generationStatus: MeditationGenerationStatus,
    onRetry: () -> Unit,
    onCancel: () -> Unit
) {
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        when (generationStatus) {
            is MeditationGenerationStatus.Starting,
            is MeditationGenerationStatus.Generating -> {
                CircularProgressIndicator(
                    modifier = Modifier.size(80.dp),
                    color = Color(0xFF64B5F6),
                    strokeWidth = 4.dp
                )
                
                Spacer(modifier = Modifier.height(32.dp))
                
                Text(
                    text = "Creating Your Meditation",
                    color = Color.White,
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = when (generationStatus) {
                        is MeditationGenerationStatus.Generating -> "Crafting step ${generationStatus.stepIndex + 1}... Almost ready!"
                        else -> "Creating your personalized meditation journey..."
                    },
                    color = Color.White.copy(alpha = 0.8f),
                    fontSize = 16.sp,
                    textAlign = TextAlign.Center
                )
            }
            
            is MeditationGenerationStatus.Error -> {
                Text(
                    text = "Generation Error",
                    color = Color.White,
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = generationStatus.message,
                    color = Color.White.copy(alpha = 0.8f),
                    fontSize = 16.sp,
                    textAlign = TextAlign.Center
                )
                
                if (generationStatus.canRetry) {
                    Spacer(modifier = Modifier.height(32.dp))
                    
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        OutlinedButton(
                            onClick = onCancel,
                            colors = ButtonDefaults.outlinedButtonColors(
                                contentColor = Color.White
                            )
                        ) {
                            Text("Cancel")
                        }
                        
                        Button(
                            onClick = onRetry,
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color(0xFF64B5F6)
                            )
                        ) {
                            Text("Retry")
                        }
                    }
                }
            }
            
            else -> {
                Text(
                    text = "Preparing meditation...",
                    color = Color.White,
                    fontSize = 18.sp
                )
            }
        }
    }
}

@Composable
private fun ReadyContent(
    currentStep: UnifiedMeditationStep?,
    onStart: () -> Unit
) {
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        currentStep?.let { step ->
            Text(
                text = step.title,
                color = Color.White,
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
            
            Spacer(modifier = Modifier.height(32.dp))
            
            Button(
                onClick = onStart,
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF4CAF50)
                ),
                modifier = Modifier.size(80.dp),
                shape = CircleShape
            ) {
                Icon(
                    Icons.Default.PlayArrow,
                    contentDescription = "Start",
                    modifier = Modifier.size(32.dp),
                    tint = Color.White
                )
            }
        }
    }
}

@Composable
private fun ActiveSessionContent(
    currentStep: UnifiedMeditationStep?,
    progress: UnifiedMeditationProgress,
    isPlaying: Boolean,
    generationStatus: MeditationGenerationStatus,
    onPlayPause: () -> Unit,
    onStop: () -> Unit,
    audioSettings: AudioSettings,
    currentSentence: String
) {
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        currentStep?.let { step ->
            Text(
                text = step.title,
                color = Color.White,
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
            
            Spacer(modifier = Modifier.height(32.dp))
            
            // Visual meditation guide (from normal screen)
            Card(
                modifier = Modifier.size(200.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color.White.copy(alpha = 0.1f)
                ),
                shape = CircleShape
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    MeditationVisual(
                        isPlaying = isPlaying,
                        modifier = Modifier.fillMaxSize()
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(32.dp))
            
            // Step timer
            Text(
                text = formatTime(progress.timeRemainingInStep),
                color = Color.White,
                fontSize = 32.sp,
                fontWeight = FontWeight.Light
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            
            // Show text for all meditations always
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f),
                colors = CardDefaults.cardColors(
                    containerColor = Color.White.copy(alpha = 0.1f)
                ),
                shape = RoundedCornerShape(16.dp)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                        .verticalScroll(rememberScrollState())
                ) {
                    Text(
                        text = if (currentSentence.isNotEmpty()) currentSentence else step.guidance,
                        color = Color.White,
                        fontSize = 16.sp,
                        lineHeight = 24.sp,
                        textAlign = TextAlign.Start
                    )
                    
                    // Show generation status for streaming content
                    if (generationStatus is MeditationGenerationStatus.StreamingContent) {
                        Spacer(modifier = Modifier.height(8.dp))
                        LinearProgressIndicator(
                            progress = { generationStatus.content.currentProgress },
                            modifier = Modifier.fillMaxWidth(),
                            color = Color(0xFF64B5F6),
                            trackColor = Color.White.copy(alpha = 0.2f)
                        )
                    }
                }
            }
            
            Spacer(modifier = Modifier.height(32.dp))
            
            // Control buttons
            Row(
                horizontalArrangement = Arrangement.spacedBy(20.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                OutlinedButton(
                    onClick = onStop,
                    colors = ButtonDefaults.outlinedButtonColors(
                        contentColor = Color.White
                    ),
                    modifier = Modifier.height(48.dp)
                ) {
                    Icon(Icons.Default.Stop, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Stop")
                }
                
                Button(
                    onClick = onPlayPause,
                    colors = ButtonDefaults.buttonColors(
                        containerColor = if (isPlaying) Color(0xFFFF9800) else Color(0xFF4CAF50)
                    ),
                    modifier = Modifier.height(48.dp)
                ) {
                    Icon(
                        if (isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,
                        contentDescription = null
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(if (isPlaying) "Pause" else "Play")
                }
            }
        }
    }
}

@Composable
private fun CompletedContent() {
    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "Meditation Complete",
            color = Color.White,
            fontSize = 28.sp,
            fontWeight = FontWeight.Bold
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Text(
            text = "Well done! Take a moment to notice how you feel.",
            color = Color.White.copy(alpha = 0.8f),
            fontSize = 16.sp,
            textAlign = TextAlign.Center
        )
    }
}

@Composable
private fun MeditationVisual(
    isPlaying: Boolean,
    modifier: Modifier = Modifier
) {
    val infiniteTransition = rememberInfiniteTransition(label = "meditation")
    
    val breathingScale by infiniteTransition.animateFloat(
        initialValue = 0.8f,
        targetValue = 1.2f,
        animationSpec = infiniteRepeatable(
            animation = tween(4000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        ),
        label = "breathing"
    )
    
    Canvas(modifier = modifier) {
        val centerX = size.width / 2
        val centerY = size.height / 2
        val baseRadius = size.minDimension / 6
        
        if (isPlaying) {
            drawBreathingVisual(centerX, centerY, baseRadius, breathingScale)
        } else {
            drawStaticVisual(centerX, centerY, baseRadius)
        }
    }
}

private fun DrawScope.drawBreathingVisual(centerX: Float, centerY: Float, baseRadius: Float, scale: Float) {
    val radius = baseRadius * scale
    drawCircle(
        color = Color(0xFF64B5F6).copy(alpha = 0.3f),
        radius = radius,
        center = androidx.compose.ui.geometry.Offset(centerX, centerY)
    )
    drawCircle(
        color = Color(0xFF64B5F6).copy(alpha = 0.1f),
        radius = radius * 1.5f,
        center = androidx.compose.ui.geometry.Offset(centerX, centerY)
    )
}

private fun DrawScope.drawStaticVisual(centerX: Float, centerY: Float, baseRadius: Float) {
    drawCircle(
        color = Color(0xFF64B5F6).copy(alpha = 0.3f),
        radius = baseRadius,
        center = androidx.compose.ui.geometry.Offset(centerX, centerY)
    )
}

// Audio settings data class
data class AudioSettings(
    val soundEnabled: Boolean,
    val backgroundSound: BackgroundSound,
    val binauralEnabled: Boolean,
    val binauralTone: BinauralTone,
    val ttsEnabled: Boolean
)

private fun formatTime(seconds: Int): String {
    val minutes = seconds / 60
    val remainingSeconds = seconds % 60
    return "%02d:%02d".format(minutes, remainingSeconds)
}

@Composable
private fun SaveMeditationDialog(
    onDismiss: () -> Unit,
    onSaveExact: (String, String) -> Unit,
    onSaveTemplate: (String, String) -> Unit,
    isFullyGenerated: Boolean
) {
    var name by remember { mutableStateOf("") }
    var description by remember { mutableStateOf("") }
    var saveType by remember { mutableStateOf(
        if (isFullyGenerated) SavedMeditationType.EXACT_SESSION else SavedMeditationType.CONFIG_TEMPLATE
    ) }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { 
            Text(
                "Save Meditation",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.SemiBold
            )
        },
        text = {
            Column(
                verticalArrangement = Arrangement.spacedBy(16.dp),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    "Choose how you'd like to save this meditation:",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                )

                // Save type selection
                Column {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        RadioButton(
                            selected = saveType == SavedMeditationType.EXACT_SESSION,
                            onClick = { if (isFullyGenerated) saveType = SavedMeditationType.EXACT_SESSION },
                            enabled = isFullyGenerated
                        )
                        Column(modifier = Modifier.padding(start = 8.dp)) {
                            Text(
                                "Save Exact Session",
                                style = MaterialTheme.typography.titleSmall,
                                fontWeight = FontWeight.Medium,
                                color = if (isFullyGenerated) MaterialTheme.colorScheme.onSurface 
                                       else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                            )
                            Text(
                                if (isFullyGenerated) "Saves the exact generated content for playback"
                                else "Content must be fully generated to save exact session",
                                style = MaterialTheme.typography.bodySmall,
                                color = if (isFullyGenerated) MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                                       else MaterialTheme.colorScheme.error.copy(alpha = 0.7f)
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        RadioButton(
                            selected = saveType == SavedMeditationType.CONFIG_TEMPLATE,
                            onClick = { saveType = SavedMeditationType.CONFIG_TEMPLATE }
                        )
                        Column(modifier = Modifier.padding(start = 8.dp)) {
                            Text(
                                "Save as Template",
                                style = MaterialTheme.typography.titleSmall,
                                fontWeight = FontWeight.Medium
                            )
                            Text(
                                "Saves settings to generate new content each time",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                            )
                        }
                    }
                }

                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("Meditation Name") },
                    placeholder = { Text("e.g., Morning Stress Relief") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true
                )

                OutlinedTextField(
                    value = description,
                    onValueChange = { description = it },
                    label = { Text("Description (Optional)") },
                    placeholder = { Text("Brief description of this meditation") },
                    modifier = Modifier.fillMaxWidth(),
                    maxLines = 3
                )
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    when (saveType) {
                        SavedMeditationType.EXACT_SESSION -> onSaveExact(name, description)
                        SavedMeditationType.CONFIG_TEMPLATE -> onSaveTemplate(name, description)
                    }
                },
                enabled = name.isNotEmpty()
            ) {
                Text("Save")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("Cancel")
            }
        }
    )
}